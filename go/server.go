//go:generate go run generators/include-source.go

package main

import (
	"github.com/gin-gonic/gin"
	_ "github.com/go-sql-driver/mysql"
	Config "github.com/platformsh/language-examples/conf"
	"github.com/platformsh/language-examples/examples"
	"net/http"
)

type exampleDef struct {
	callback func() string
	source string
}

type exampleList map[string]exampleDef

func exampleDefinitions() exampleList {
	ex := exampleList{}

	// The source constants are generated by `go generate` in the sources.go file.
	ex["mysql"] = exampleDef{callback: examples.MySQL, source: Mysql}
	ex["postgresql"] = exampleDef{callback: examples.Postgresql, source: Postgresql}

	return ex
}

func main() {
	r := gin.Default()

	ex := exampleDefinitions()


	r.GET("/:service", func(c *gin.Context) {
		service := c.Param("service")
		def := ex[service]
		c.String(http.StatusOK, def.source)
	})

	r.GET("/:service/output", func(c *gin.Context) {
		service := c.Param("service")
		def := ex[service]

		out := def.callback()
		c.String(http.StatusOK, out)
	})

	r.GET("/", func (c *gin.Context) {
		//for id, def := range ex {

		//}
	})

	// Listen and Server in the port defined by Platform.sh.
	r.Run(":" + Config.PshConfig.Port())
}
